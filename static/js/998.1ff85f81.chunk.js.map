{"version":3,"file":"static/js/998.1ff85f81.chunk.js","mappings":"uPAWMA,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAQF,GACJ,IAAK,UACD,OAAOG,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAEnB,IAAK,UACD,OAAOF,GAAiBC,EAAAA,EAAAA,KAACF,EAAS,KAAKE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAEnD,IAAK,YACD,OAAOD,EAAAA,EAAAA,KAACF,EAAS,IAErB,IAAK,QACD,OAAOE,EAAAA,EAAAA,KAACE,EAAAA,EAAY,IAExB,QACI,MAAM,IAAIC,MAAM,4BAE5B,EAgFA,EA9EmB,WAEf,IAAAC,GAAoCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,GAA8CL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAA4BT,EAAAA,EAAAA,UAAS,KAAIU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAlCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAsCb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElCG,GAA4CC,EAAAA,EAAAA,KAArCC,EAAYF,EAAZE,aAAc3B,EAAOyB,EAAPzB,QAAS4B,EAAUH,EAAVG,YAE9BC,EAAAA,EAAAA,YAAU,WACNC,EAAcX,GAAQ,EAC1B,GAAG,IAEH,IAAMY,EAAiB,SAACC,GACpB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAEZrB,GAAc,SAAAD,GAAU,SAAAwB,QAAAC,EAAAA,EAAAA,GAAQzB,IAAUyB,EAAAA,EAAAA,GAAKJ,GAAa,IAC5DhB,GAAmB,GACnBI,GAAU,SAAAD,GAAM,OAAIA,EAAS,CAAC,IAC9BK,EAAeS,EACnB,EAEMH,EAAgB,SAACX,EAAQkB,GACjBrB,GAAVqB,GACAV,EAAaR,GACRmB,KAAKP,GACLO,MAAK,kBAAMV,EAAW,YAAY,GAC3C,EAgCA,OACIW,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CAErB1C,EAAWC,GAAS,kBAjCX,SAAC0C,GAClB,IAAMC,EAAQD,EAAIE,KAAI,SAACC,EAAQC,GAEvBD,EAAOE,UAGX,IAAMC,EAAQH,EAAOG,MAAMd,OAAS,GAAE,GAAAC,OAAMU,EAAOG,MAAMC,MAAM,EAAG,IAAG,OAAQJ,EAAOG,MAC9EE,EAAyB,IAAjBL,EAAOK,MAAc,gBAAe,GAAAf,OAAMU,EAAOK,MAAK,KACpE,OACI/C,EAAAA,EAAAA,KAAA,MAAIqC,UAAU,eAEVW,SAAU,EAAEV,UAEZF,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CAACC,GAAE,WAAAlB,OAAaU,EAAOS,IAAKb,SAAA,EAC7BtC,EAAAA,EAAAA,KAAA,OAAKoD,IAAKV,EAAOE,UAAWS,IAAKX,EAAOG,MAAOR,UAAU,sBACzDrC,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,oBAAmBC,SAAEO,KACpC7C,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,qBAAoBC,SAAES,QANpCJ,EAUjB,IAEA,OACI3C,EAAAA,EAAAA,KAAA,MAAIqC,UAAU,eAAcC,SACvBE,GAGb,CAMsCc,CAAa9C,EAAW,GAAEI,IAExDZ,EAAAA,EAAAA,KAAA,UAAQqC,UAAU,mCACVkB,SAAU3C,EACV4C,MAAO,CAAC,QAAWpC,EAAc,OAAS,SAC1CqC,QAAS,kBAAM9B,EAAcX,EAAO,EAACsB,UAEzCtC,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,QAAOC,SAAC,kBAIvC,E,UChEMoB,EAAO,SAAHC,GAAiB,IAAZC,EAAKD,EAALC,MACJf,EAAmDe,EAAnDf,MAAOgB,EAA4CD,EAA5CC,YAAajB,EAA+BgB,EAA/BhB,UAAWkB,EAAoBF,EAApBE,UAAWf,EAASa,EAATb,MAEjD,OACIX,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBtC,EAAAA,EAAAA,KAAA,OAAKoD,IAAKR,EAAWS,IAAKR,EAAOR,UAAU,uBAC3CD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BtC,EAAAA,EAAAA,KAAA,MAAIqC,UAAU,qBAAoBC,SAAEO,KACpC7C,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,sBAAqBC,SAAEuB,KACpC7D,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,sBAAqBC,SAAEwB,KACpC9D,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,sBAAqBC,SAAC,qBACnCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,CAAES,EAAM,WAEhD/C,EAAAA,EAAAA,KAACiD,EAAAA,GAAI,CAACC,GAAG,UAAUb,UAAU,qBAAoBC,SAAC,kBAG9D,EAEA,EAnDwB,WACpB,IAAOyB,GAAWC,EAAAA,EAAAA,MAAXD,QACP3D,GAA0BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCwD,EAAKtD,EAAA,GAAE2D,EAAQ3D,EAAA,GACtBgB,GAAmDC,EAAAA,EAAAA,KAA5C2C,EAAO5C,EAAP4C,QAASC,EAAK7C,EAAL6C,MAAOC,EAAY9C,EAAZ8C,aAAcC,EAAU/C,EAAV+C,YAGrC3C,EAAAA,EAAAA,YAAU,WACN4C,GACJ,GAAG,CAACP,IAEJ,IAAMO,EAAc,WAChBD,IACAD,EAAaL,GACR5B,KAAKoC,EACd,EAEMA,EAAgB,SAACX,GACnBK,EAASL,EACb,EAEMY,EAAeL,GAAQnE,EAAAA,EAAAA,KAACE,EAAAA,EAAY,IAAK,KACzCuE,EAAUP,GAAUlE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAAK,KACjCyE,EAAYR,GAAWC,IAAUP,EAAiC,MAAxB5D,EAAAA,EAAAA,KAAC0D,EAAI,CAACE,MAAOA,IAE7D,OACIxB,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,CACKkC,EACAC,EACAC,IAGb,E,UCXA,EArBmB,WACf,OACItC,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,EACIF,EAAAA,EAAAA,MAACwC,EAAAA,EAAM,CAAAtC,SAAA,EACHtC,EAAAA,EAAAA,KAAA,QACI6E,KAAK,cACLH,QAAQ,sBAEZ1E,EAAAA,EAAAA,KAAA,SAAAsC,SAAO,oBAEXtC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAS,KACV9E,EAAAA,EAAAA,KAAC+E,EAAAA,GAAM,CAAAzC,UACHF,EAAAA,EAAAA,MAAC4C,EAAAA,GAAK,CAAA1C,SAAA,EACFtC,EAAAA,EAAAA,KAACgF,EAAAA,GAAK,CAACC,KAAK,YAAYC,SAASlF,EAAAA,EAAAA,KAACmF,EAAe,OACjDnF,EAAAA,EAAAA,KAACgF,EAAAA,GAAK,CAACC,KAAK,IAAIC,SAASlF,EAAAA,EAAAA,KAACoF,EAAU,aAKxD,C","sources":["components/comicsList/ComicsList.js","components/pages/SingleComicPage.js","components/pages/ComicsPage.js"],"sourcesContent":["import './comicsList.scss';\r\nimport uw from '../../resources/img/UW.png';\r\nimport xMen from '../../resources/img/x-men.png';\r\nimport {useEffect, useState} from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../spiner/Spinner\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [listComics, setListComics] = useState([]);\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    const [offset, setOffset] = useState(200);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const {getAllComics, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        loadingComics(offset, true)\r\n    }, [])\r\n\r\n    const onComicsLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n        setListComics(listComics => [...listComics, ...newComicsList]);\r\n        setNewItemsLoading(false);\r\n        setOffset(offset => offset + 8);\r\n        setComicsEnded(ended);\r\n    }\r\n\r\n    const loadingComics = (offset, initial) => {\r\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const renderComics = (arr) => {\r\n        const items = arr.map((comics, i) => {\r\n            let imgStyle = {objectFit: 'cover'};\r\n            if (comics.thumbnail === \"https://assets.entrepreneur.com/content/3x2/2000/20160701113917-Marvel.jpeg\") {\r\n                imgStyle = {objectFit: 'unset'};\r\n            }\r\n            const title = comics.title.length > 30 ? `${comics.title.slice(0, 29)}...` : comics.title;\r\n            const price = comics.price === 0 ? 'NOT AVAILABLE' : `${comics.price}$`;\r\n            return (\r\n                <li className=\"comics__item\"\r\n                    key={i}\r\n                    tabIndex={0}\r\n                >\r\n                    <Link to={`/comics/${comics.id}`}>\r\n                        <img src={comics.thumbnail} alt={comics.title} className=\"comics__item-img\"/>\r\n                        <div className=\"comics__item-name\">{title}</div>\r\n                        <div className=\"comics__item-price\">{price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {\r\n                setContent(process, () => renderComics(listComics), newItemsLoading)\r\n            }\r\n            <button className=\"button button__main button__long\"\r\n                    disabled={newItemsLoading}\r\n                    style={{'display': comicsEnded ? 'none' : 'block'}}\r\n                    onClick={() => loadingComics(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ComicsList;\r\n","import './singleComicPage.scss';\r\nimport xMen from '../../resources/img/x-men.png';\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {useEffect, useState} from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../spiner/Spinner\";\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {loading, error, getComicById, clearError} = useMarvelService();\r\n\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComicById(comicId)\r\n            .then(onComicLoaded);\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, thumbnail, pageCount, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: en-us</p>\r\n                <div className=\"single-comic__price\">{price}$</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;\r\n","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport SingleComicPage from \"./SingleComicPage\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <Routes>\r\n                <Route>\r\n                    <Route path=\"/:comicId\" element={<SingleComicPage/>}/>\r\n                    <Route path=\"/\" element={<ComicsList/>}/>\r\n                </Route>\r\n            </Routes>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;\r\n"],"names":["setContent","process","Component","newItemLoading","_jsx","Spinner","ErrorMessage","Error","_useState","useState","_useState2","_slicedToArray","listComics","setListComics","_useState3","_useState4","newItemsLoading","setNewItemsLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","getAllComics","setProcess","useEffect","loadingComics","onComicsLoaded","newComicsList","ended","length","concat","_toConsumableArray","initial","then","_jsxs","className","children","arr","items","map","comics","i","thumbnail","title","slice","price","tabIndex","Link","to","id","src","alt","renderComics","disabled","style","onClick","View","_ref","comic","description","pageCount","comicId","useParams","setComic","loading","error","getComicById","clearError","updateComic","onComicLoaded","errorMessage","spinner","content","_Fragment","Helmet","name","AppBanner","Routes","Route","path","element","SingleComicPage","ComicsList"],"sourceRoot":""}